generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  role       Role      @default(USER)
  Hospital   Hospital? @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String?   @db.ObjectId
}

model Doctor {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  name       String
  specialty  String?
  phone      String?
  email      String    @unique
  Hospital   Hospital? @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String?   @db.ObjectId
  patients   Patient[]

  @@unique([userId, hospitalId, email])
}

model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // General Details
  firstName     String
  lastName      String
  email         String   @unique
  dateOfBirth   DateTime
  gender        Gender
  weight        Float?
  height        Float?
  bmi           Float?
  token         String
  icdCode       String?
  diagnosisNote String?

  // Health Background
  medicalHistory      MedicalHistory?
  currentHealthStatus CurrentHealthStatus?

  // Relationships
  doctor      Doctor?      @relation(fields: [doctorId], references: [id])
  doctorId    String?      @db.ObjectId
  hospital    Hospital?    @relation(fields: [hospitalId], references: [id])
  hospitalId  String?      @db.ObjectId
  // vitalSigns  VitalSign[]
  medications Medication[]
  thresholds  Threshold[]

  @@index([email, doctorId, hospitalId])
}

model MedicalHistory {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  patient              Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId            String  @unique @db.ObjectId
  medicalConditions    String?
  previousSurgeries    String?
  ongoingTreatments    String?
  medications          String?
  allergies            String?
  familyConditions     String?
  noKnownHistory       Boolean @default(false)
  noKnownFamilyHistory Boolean @default(false)
}

model CurrentHealthStatus {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  patient           Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId         String             @unique @db.ObjectId
  symptoms          String?
  symptomIntensity  Int?
  symptomDuration   String?
  smoking           SmokingStatus
  alcohol           AlcoholConsumption
  diet              DietType?
  exerciseFrequency String?
  sleepHours        Int?
}

model Hospital {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  hospitalCode String    @unique
  name         String
  location     String?
  users        User[]
  doctors      Doctor[]
  patients     Patient[]
}

// model VitalSign {
//   id               String   @id @default(auto()) @map("_id") @db.ObjectId
//   patientId        String   @db.ObjectId
//   timestamp        DateTime @default(now())
//   heartRate        Int?     @default(0)
//   bloodPressure    String?  @default("0/0")
//   temperature      Float?   @default(0)
//   respiratoryRate  Int?     @default(0)
//   oxygenSaturation Int?     @default(0)
//   patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

//   @@index([patientId, timestamp])
// }

model Medication {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  patient   Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String         @db.ObjectId
  name      String
  type      MedicationType
  frequency String
  // duration  String
  startDate DateTime
  endDate   DateTime
  notes     String?
  timezone  String
  schedule  Json[]

  @@index([patientId, startDate, endDate])
}

model Threshold {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      VitalType
  min       String
  max       String
  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String    @db.ObjectId

  @@unique([patientId, type])
}

enum Role {
  ADMIN
  USER
  DOCTOR
}

enum VitalType {
  HEART_RATE
  BLOOD_PRESSURE
  TEMPERATURE
  BLOOD_GLUCOSE
  RESPIRATORY_RATE
  OXYGEN_SATURATION
}

enum MedicationType {
  LIQUID
  CAPSULE
  TABLET
  INJECTION
  INHALER
  DROPS
}

enum SmokingStatus {
  NEVER
  FORMER
  CURRENT
}

enum AlcoholConsumption {
  NONE
  OCCASIONAL
  MODERATE
  HEAVY
}

enum DietType {
  REGULAR
  VEGETARIAN
  VEGAN
  KETO
  PALEO
  OTHER
}

enum ExerciseFrequency {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
