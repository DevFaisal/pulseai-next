generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  role       Role      @default(USER)
  Hospital   Hospital? @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String?   @db.ObjectId
}

model Doctor {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  name       String
  specialty  String?
  phone      String?
  email      String    @unique
  Hospital   Hospital? @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String?   @db.ObjectId
  patients   Patient[]

  @@unique([userId, hospitalId, email])
}

// model Patient {
//   id               String       @id @default(auto()) @map("_id") @db.ObjectId
//   name             String
//   email            String
//   age              Int
//   gender           String
//   weight           Float
//   height           Float
//   bloodType        String
//   BMI              Float
//   token            String
//   icdCode          String?
//   doctorNote       String?
//   hospitalId       String       @db.ObjectId
//   assignedDoctorId String?      @db.ObjectId
//   hospital         Hospital     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
//   assignedDoctor   Doctor?      @relation(fields: [assignedDoctorId], references: [id], onDelete: Cascade)
//   vitalSigns       VitalSign[]
//   medications      Medication[]
//   Threshold        Threshold[]
// }

model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // General Details
  firstName   String
  lastName    String
  email       String   @unique
  dateOfBirth DateTime
  gender      String
  weight      Float
  height      Float
  token       String
  bmi         Float

  // Health Background
  medicalConditions String?
  previousSurgeries String?
  ongoingTreatments String?
  noKnownHistory    Boolean @default(false)

  // Current Health Status
  symptoms           String?
  symptomIntensity   Int?
  symptomDuration    String?
  additionalComments String?
  doctorAssigned     String?

  // Medication & Allergies
  medications            String?
  foodAllergies          Boolean @default(false)
  medicationAllergies    Boolean @default(false)
  environmentalAllergies Boolean @default(false)
  otherAllergies         String?

  // Lifestyle Factors
  smoking           String?
  alcohol           String?
  diet              String?
  exerciseFrequency Int?
  sleepHours        Int?

  // Family Health History
  familyConditions     String?
  noKnownFamilyHistory Boolean @default(false)

  // Relationships
  Doctor     Doctor?      @relation(fields: [doctorId], references: [id])
  doctorId   String?      @db.ObjectId
  Hospital   Hospital?    @relation(fields: [hospitalId], references: [id])
  hospitalId String?      @db.ObjectId
  VitalSign  VitalSign[]
  Medication Medication[]
  Threshold  Threshold[]
}

model Hospital {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  hospitalCode String    @unique
  name         String
  location     String?
  users        User[]
  doctors      Doctor[]
  patients     Patient[]
}

model VitalSign {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId        String   @db.ObjectId
  timestamp        DateTime @default(now())
  heartRate        Int?     @default(0)
  bloodPressure    String?  @default("0/0")
  temperature      Float?   @default(0)
  respiratoryRate  Int?     @default(0)
  oxygenSaturation Int?     @default(0)
  patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Medication {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  patientId String         @db.ObjectId
  name      String
  type      MedicationType
  frequency String
  duration  String
  startDate DateTime
  endDate   DateTime
  notes     String?
  timezone  String
  schedule  Json[]
  patient   Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

// {
//     "name": "Citrizen - Anti Alergix",
//     "type": "Tablet",
//     "frequency": "Once a day",
//     "Duration": "3 days",
//     "startDate": "2024-10-01T08:00:00Z",
//     "endDate": "2024-10-03T08:00:00Z",
//     "notes": "Take with water after food. Drink plenty of fluids.",
//     "timezone": "Dubai",
//     "schedule": [
//         {
//             "period": "Night",
//             "beforeAfterMeal": "After meal",
//             "specificTime": "09:00 PM",
//             "alert": true,
//             "status": ""
//         }
//     ]
// }

model Threshold {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  // doctorId  String    @db.ObjectId
  name      String
  type      VitalType
  min       Float
  max       Float
  patientId String    @db.ObjectId
  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, type])
}

enum Role {
  ADMIN
  USER
  DOCTOR
}

enum VitalType {
  HEART_RATE
  BLOOD_PRESSURE
  TEMPERATURE
  BLOOD_GLUCOSE
  RESPIRATORY_RATE
  OXYGEN_SATURATION
}

enum MedicationType {
  LIQUID
  CAPSULE
  TABLET
  INJECTION
  INHALER
  DROPS
}
